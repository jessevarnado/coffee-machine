{
  "name": "grunt-vows-runner",
  "version": "0.6.0",
  "description": "An alternative test-runner for vows using grunt.  Adds new capabilities such as running test suites concurrently.",
  "keywords": [
    "vows",
    "test",
    "testing",
    "runner",
    "task",
    "gruntplugin",
    "grunt",
    "bdd",
    "concurrent",
    "asynchronous",
    "parallel"
  ],
  "author": {
    "name": "Adam Stallard",
    "email": "adam@goalzen.org",
    "url": "goalzen.org"
  },
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "lodash": "*"
  },
  "peerDependencies": {
    "grunt": "~0.4",
    "vows": "*"
  },
  "devDependencies": {
    "vows": "*",
    "chai": "*",
    "grunt": "~0.4",
    "grunt-contrib-jshint": "*"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/goalzen/grunt-vows-runner/blob/master/LICENSE-MIT"
  },
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "grunt"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/goalzen/grunt-vows-runner.git"
  },
  "bugs": {
    "url": "https://github.com/goalzen/grunt-vows-runner/issues"
  },
  "homepage": "https://github.com/goalzen/grunt-vows-runner.git",
  "readme": "##grunt-vows-runner\n\n[![Build Status](https://travis-ci.org/goalzen/grunt-vows-runner.png?branch=master)](https://travis-ci.org/goalzen/grunt-vows-runner)\n\nAn alternative test-runner for vows using [grunt](http://gruntjs.com/).\n\n###Philosophy\n\nFile and directory matching, file watching, coverage reporting, etc. should be supplied by third-party tools where possible.\nGrunt is a great source of such third-party-tools.  These are much more likely to continue development than the equivalent\ntools built into vows, since they are used by many other packages as well.\n\n###Additions\n\nWith grunt-vows-runner you can\n\n* Use grunt [targets](http://gruntjs.com/configuring-tasks#task-configuration-and-targets) and\n[templates](http://gruntjs.com/configuring-tasks#templates).\n* Run suites in the same target concurrently.\n* Set different options for each target.\n* Have each target output to a different file (or the console).\n* Disable groups of tests at the target level.\n\n###Differences from the vows command-line runner\n\n* Use grunt to specify which [files](http://gruntjs.com/configuring-tasks#files) to run.\n* Use grunt's ``watch`` task.\n* No shuffle option (if you want this, let me know--it is easy to implement).\n* No built-in js-coverage support.\n * I highly recommend [istanbul](https://github.com/yahoo/istanbul), which does not need the cooperation of the test-runner\n (simply ``istanbul cover bin/vows`` will work ); and it is written in javascript, not java.\n* No 'isolate' option.  If your system-under-test uses process.cwd, process.argv, or process.exit,\nit is best to create a [child process](http://nodejs.org/api/child_process.html) in the test topic.\n\n###Installation\n\n1. Change directories to the root directory of your project\n2. ``npm install grunt-vows-runner``\n3. Add the following line to your ``Gruntfile.js``\n\n```javascript\ngrunt.loadNpmTasks('grunt-vows-runner');\n```\n\n###Configuration\n\nConfiguration is placed in the ``grunt.initConfig`` section of your ``Gruntfile.js`` file in the ``vows`` object.\n\n``vows`` is a [multitask](http://gruntjs.com/creating-tasks#multi-tasks).\n\nEach target references one or more source files containing suites and may contain options which will be applied to all of those\nsuites.\n\nAn example ``vows`` configuration with two targets:\n\n    ...\n    vows : {\n      all : {\n        src : \"<%= allTests %>\",\n        options : {\n          reporter : \"spec\"\n        }\n      },\n      allXunit : {\n        src : \"<%= allTests %>\",\n        dest : \"testResults.xml\"\n        options : {\n          reporter : \"Xunit\"\n        }\n      }\n    },\n    allTests : \"tests/*\"\n    ...\n\nThe example above uses the [_compact format_ for specifying files](http://gruntjs.com/configuring-tasks#compact-format)\nas well as [templates](http://gruntjs.com/configuring-tasks#templates).\n\nOne destination file (``dest``) can be specified per target.  It will contain the output of all the suites in the target.  If no\ndestination file is specified, the output will go to the console.\n\nPaths for both source and destination files are relative to the location of ``Gruntfile.js``.\n\nResults are summed by target.  Grunt-vows-runner doesn't combine the results of multiple targets.\n\nSuites within a target are run concurrently; faster suites will finish first.  Targets in grunt are always run sequentially.\n\n####Options\n\nOptions can be placed at the task (``vows``), target, or suite level.\n\nHere is an example of each:\n\n_Gruntfile.js_ (task- and target-level options) -- the reporter is set at the task-level\n\n    ...\n    vows : {\n      options : {\n        reporter : \"spec\"\n      },\n      most : {\n        src : [\"test/*\", \"!test/errorTests.js\"]\n      },\n      error : {\n        src : \"test/errorTests.js\",\n        options : {\n          error : false\n        }\n      }\n    }\n    ...\n\n_test/errorTests.js_ (suite-level options) -- this is a different way to accomplish the same as above\n\n    ...\n    vows.describe('Error Handling').addBatch({\n    ...\n    }).export(module, {error : false});\n    ...\n\nThe following options are available:\n\n* ``error``\n * Whether or not vows should handle errors in topics for you.  Set ``error : false`` if you want to handle your own errors.\n The first argument to your vows will be reserved for errors.\n* ``reporter``\n * [See the list of reporters](#reporters)\n* ``matcher``\n * a javascript [RegExp object](http://www.w3schools.com/jsref/jsref_obj_regexp.asp); only run tests whose titles match this\n object.\n* ``disabled``\n * Temporarily disable tests for a target.\n\n####Reporters<a id=\"reporters\"/>\n\nFrom grunt-vows-runner:\n\n* spec\n* xunit\n  * Produces output meant for [Jenkins CI](http://jenkins-ci.org/). It tries to divide the tests into a hierarchy of levels\n   for easier navigation in the Jenkins test report.\n  * Use the colon (':') character to separate levels.  For example if you had a topic (or a subtopic,\n   or combination) that looked like this:\n\n        ``Monkeys: grooming``\n\n        then there would be a \"Monkeys\" folder in Jenkins with a \"grooming\" folder inside of it, containing the test results.\n\nFrom [vows](https://github.com/cloudhead/vows/tree/master/lib/vows/reporters)\n\n* tap\n* dot-matrix\n* json\n\nRequest any other reporters [here](https://github.com/goalzen/grunt-vows-runner/issues)\n\n###Command-Line Options\n\ngrunt-vows-runner incorporates the following grunt command-line options, if present:\n\n* ``--no-color``\n* ``--verbose``\n\n###Bugs, etc.\n\nPlease report any bugs, feature requests, etc. to [grunt-vows-runner's github issue tracker](https://github.com/goalzen/grunt-vows-runner/issues).\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-vows-runner@0.6.0",
  "dist": {
    "shasum": "a32cca22c0b93f00e6e1d1f33225d74096ee6e3c",
    "tarball": "http://registry.npmjs.org/grunt-vows-runner/-/grunt-vows-runner-0.6.0.tgz"
  },
  "_from": "grunt-vows-runner@>=0.6.0 <0.7.0",
  "_npmVersion": "1.2.25",
  "_npmUser": {
    "name": "adamstallard",
    "email": "adam@goalzen.org"
  },
  "maintainers": [
    {
      "name": "adamstallard",
      "email": "adam@sweedl.com"
    }
  ],
  "_shasum": "a32cca22c0b93f00e6e1d1f33225d74096ee6e3c",
  "_resolved": "https://registry.npmjs.org/grunt-vows-runner/-/grunt-vows-runner-0.6.0.tgz"
}
